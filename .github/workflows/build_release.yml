name: Publish Release

on:
  release:
    types:
      - created
  workflow_dispatch: {}

jobs:
  docker:
    name: Build & Push - Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: get_tag
        name: Get Tag
        env:
          GITHUB_HEAD_REF: $${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: |
          if [ "${{ github.event.release.tag_name }}" != "" ]
          then
            TAG=$(jq --raw-output '.release.tag_name' $GITHUB_EVENT_PATH)
          else
            TAG=`git tag`-`git rev-parse --short HEAD`
          fi
          
          echo $TAG > semantic.version
          
          echo ::set-output name=TAG::$TAG
      - name: Build Godot Project
        id: build
        uses: josephbmanley/build-godot-action@v1.4.0
        with:
          name: TetraForce
          preset: linux
          projectDir: '.'
          debugMode: 'true'
      - name: Get Docker Repo Name
        id: find_repo
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=REPO::$REPO
      - name: Push Tag to GitHub Package
        uses: opspresso/action-docker@master
        with:
          args: --docker
        env:
          USERNAME: ${{ github.actor }}
          PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          REGISTRY: "docker.pkg.github.com/${{ steps.find_repo.outputs.REPO }}"
          BUILD_PATH: "."
          DOCKERFILE: "Dockerfile"
          IMAGE_NAME: "tetraforce"
          TAG_NAME: ${{ steps.get_tag.outputs.TAG }}
          LATEST: "true"
      - name: Docker Build & Push to AWS ECR
        uses: opspresso/action-docker@master
        with:
          args: --ecr
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-2"
          IMAGE_URI: "141264065387.dkr.ecr.us-east-2.amazonaws.com/tetraforce"
          BUILD_PATH: "."
          DOCKERFILE: "Dockerfile"
          TAG_NAME: ${{ steps.get_tag.outputs.TAG }}
          LATEST: "true"
  linux:
    name: Build & Push - Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: get_tag
        name: Get Tag
        env:
          GITHUB_HEAD_REF: $${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: |
          if [ "${{ github.event.release.tag_name }}" != "" ]
          then
            TAG=$(jq --raw-output '.release.tag_name' $GITHUB_EVENT_PATH)
          else
            TAG=`git tag`-`git rev-parse --short HEAD`
          fi
          
          echo $TAG > semantic.version
          
          echo ::set-output name=TAG::$TAG
      - name: Build
        id: build
        uses: josephbmanley/build-godot-action@v1.4.0
        with:
          name: TetraForce.x86_64
          preset: linux
          projectDir: '.'
          debugMode: 'true'
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Client - linux
          path: ${{ github.workspace }}/${{ steps.build.outputs.build }}
      - name: Package
        run: |
          cd ${{ steps.build.outputs.build }}
          mkdir -p ${{github.workspace}}/tetraforce
          zip -r ${{github.workspace}}/tetraforce/TetraForce.zip .
      - name: Ship to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: tetraforce-public-production-us-east-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          SOURCE_DIR: ${{github.workspace}}/tetraforce
          DEST_DIR: builds/master/latest/linux
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Clear CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/builds/master/latest/linux/*"
  windows:
    name: Build & Push - Windows
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [win32, win64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: get_tag
        name: Get Tag
        env:
          GITHUB_HEAD_REF: $${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: |
          if [ "${{ github.event.release.tag_name }}" != "" ]
          then
            TAG=$(jq --raw-output '.release.tag_name' $GITHUB_EVENT_PATH)
          else
            TAG=`git tag`-`git rev-parse --short HEAD`
          fi
          
          echo $TAG > semantic.version
          
          echo ::set-output name=TAG::$TAG
      - name: Build
        id: build
        uses: josephbmanley/build-godot-action@v1.4.0
        with:
          name: TetraForce.exe
          preset: ${{ matrix.platform }}
          projectDir: '.'
          debugMode: 'true'
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Client - ${{ matrix.platform }}
          path: ${{ github.workspace }}/${{ steps.build.outputs.build }}
      - name: Package
        run: |
          cd ${{ steps.build.outputs.build }}
          mkdir -p ${{github.workspace}}/tetraforce
          zip -r ${{github.workspace}}/tetraforce/TetraForce.zip .
      - name: Ship to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: tetraforce-public-production-us-east-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          SOURCE_DIR: ${{github.workspace}}/tetraforce
          DEST_DIR: builds/master/latest/${{ matrix.platform }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Clear CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/builds/master/latest/${{ matrix.platform }}/*"
  osx:
    name: Build OSX
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Godot
        run: |
          wget https://downloads.tuxfamily.org/godotengine/3.3.2/Godot_v3.3.2-stable_osx.universal.zip -O Godot.zip
          unzip Godot.zip
          rm Godot.zip
          mv Godot.app /Applications/Godot.app
          ln -s /Applications/Godot.app/Contents/MacOS/Godot /usr/local/bin/godot
      - id: get_tag
        name: Get Tag
        env:
          GITHUB_HEAD_REF: $${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: |
          if [ "${{ github.event.release.tag_name }}" != "" ]
          then
            TAG=$(jq --raw-output '.release.tag_name' $GITHUB_EVENT_PATH)
          else
            TAG=`git tag`-`git rev-parse --short HEAD`
          fi
          
          echo $TAG > semantic.version
          
          echo ::set-output name=TAG::$TAG
      - name: Build Project
        run: |
          wget https://downloads.tuxfamily.org/godotengine/3.3.2/Godot_v3.3.2-stable_export_templates.tpz -q
          unzip Godot_v3.3.2-stable_export_templates.tpz -d .
          mkdir -p "/Users/runner/Library/Application Support/Godot/templates/3.3.2.stable"
          mv templates/* "/Users/runner/Library/Application Support/Godot/templates/3.3.2.stable"

          mkdir -p $GITHUB_WORKSPACE/build
          godot --export osx $GITHUB_WORKSPACE/build/TetraForce.dmg
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: "Client - OSX"
          path: ${{ github.workspace }}/build/TetraForce.dmg
  publish_osx:
    name: Publish OSX
    runs-on: ubuntu-latest
    needs: osx
    steps:
    - name: Download Build
      uses: actions/download-artifact@v2
      with:
        name: "Client - OSX"
    - name: Configure
      run: |
        mkdir tetraforce
        mv TetraForce.dmg ./tetraforce/TetraForce.dmg
    - name: Ship to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: tetraforce-public-production-us-east-2
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-2
        SOURCE_DIR: ${{github.workspace}}/tetraforce
        DEST_DIR: builds/master/latest/osx
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Clear CloudFront Cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/builds/master/latest/osx/*"
  html5:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        id: build
        uses: josephbmanley/build-godot-action@v1.4.0
        with:
          name: index.html
          preset: HTML5
          projectDir: '.'
      - name: Ship to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: tetraforce-web-production-us-east-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          SOURCE_DIR: ${{ github.workspace }}/${{ steps.build.outputs.build }}
